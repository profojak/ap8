#define _POSIX_C_SOURCE 200112L

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <time.h>
#include <unistd.h>

#include "mzapo/mzapo_parlcd.h"
#include "mzapo/mzapo_phys.h"
#include "mzapo/mzapo_regs.h"
#include "fonts/font_types.h"

int main(int argc, char *argv[])
{
  printf("Hello world\n");

  unsigned char *LED_BASE = (unsigned char *)map_phys_address(
    SPILED_REG_BASE_PHYS, SPILED_REG_SIZE, 0);
  unsigned char *AUDIO_BASE = (unsigned char *)map_phys_address(
    AUDIOPWM_REG_BASE_PHYS, AUDIOPWM_REG_SIZE, 0);
  unsigned char *LCD_BASE = (unsigned char *)map_phys_address(
    PARLCD_REG_BASE_PHYS, PARLCD_REG_SIZE, 0);

  // LCD init
  parlcd_hx8357_init(LCD_BASE);
  parlcd_write_cmd(LCD_BASE, 0x2c);
  int i, j;
  unsigned int c;
  for (i = 0; i < 320; i++) {
    for (j = 0; j < 480; j++) {
      c = 0;
      parlcd_write_data(LCD_BASE, c);
    }
  }

  // blue
  c = 0x000f;
  for (i = 40; i < 80; i++) {
    for (j = 0; j < 480; j++) {
      parlcd_write_data(LCD_BASE, c);
    }
  }
 
  // green 
  c = 0x01e0;
  for (i = 80; i < 120; i++) {
    for (j = 0; j < 480; j++) {
      parlcd_write_data(LCD_BASE, c);
    }
  }

  // red
  c = 0x7800;
  for (i = 120; i < 160; i++) {
    for (j = 0; j < 480; j++) {
      parlcd_write_data(LCD_BASE, c);
    }
  }

  /*// white
  c = 0xffff;
  for (i = 160; i < 200; i++) {
    for (j = 0; j < 480; j++) {
      parlcd_write_data(LCD_BASE, c);
    }
  }*/

  // text
  unsigned short *screen = (unsigned short *)malloc(480 * 16 * 2);

  char text[5] = "Hi :*"; 
  int width, w, ptr;
  unsigned short mask = 1<<15;
  for (j = 0; j < font_winFreeSystem14x16.height; j++) {
    ptr = j * 480;
    for (i = 0; i < 5; i++) {
      width = font_winFreeSystem14x16.width[text[i] - 0x20];
      for (w = 0; w < width; w++) {
        c = 0;
        if (font_winFreeSystem14x16.bits[16 * (text[i] - 0x20) + j] & (short)(mask >> w)) {
          printf("X"); //
          c = 0x39ef;
        } else {
          printf(" "); //
        }
        screen[ptr++] = c;
      }
      printf("  ");
    }
    printf("\n"); //
  }

  // super tiny text lmao
  //parlcd_write_cmd(LCD_BASE, 0x2c);
  /*ptr = 0;
  for (i = 0; i < 16; i++) {
    for (j = 0; j < 480; j++) {
      parlcd_write_data(LCD_BASE, screen[ptr++]);
    }
  }*/

  // MEGA HUGE TEXT LMAO
  int k;
  for (i = 0; i < 16; i++) {
    for (j = 0; j < 10; j++) {
      ptr = i * 480;
      for (w = 0; w < 48; w++) {
        for (k = 0; k < 10; k++) {
          parlcd_write_data(LCD_BASE, screen[ptr]);
        }
        ptr++;
      }
    }
  }

  // LEDs
  i = 2;
  while (i != 0) {
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff0;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff00;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff000;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff0000;
    usleep(100000);
    *(volatile uint32_t*)(AUDIO_BASE + AUDIOPWM_REG_PWM_o) = 0xffffff;
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff00000;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff000000;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff00000;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff0000;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff000;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff00;
    usleep(100000);
    *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff0;
    usleep(100000);
    i--;
  }
  *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0xff;
  usleep(100000);

  *(volatile uint32_t*)(LED_BASE + SPILED_REG_LED_LINE_o) = 0x0;
  printf("Goodbye world\n");

  return 0;
}
